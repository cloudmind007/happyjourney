import React, { useState } from "react";
import {
  LayoutDashboard,
  Image,
  FileText,
  Package,
  UtensilsCrossed,
  Users,
  ShoppingCart,
  CreditCard,
  MapPin,
  Award,
  Star,
  Palette,
  Globe,
  RefreshCw,
  DollarSign,
  TrendingUp,
  UserPlus,
  Menu,
  ChevronRight,
  Eye,
  Search,
  ChevronDown,
  MoreHorizontal,
  Grid3X3,
  Utensils,
  X,
  ChevronLeft,
  Bell,
  Settings,
} from "lucide-react";

// Common Sidebar Component (Fixed)
const CommonSidebar = ({ collapsed, setCollapsed, activeItem, setActiveItem }) => {
  const sidebarItems = [
    { icon: Grid3X3, label: "Dashboard", key: "dashboard" },
    { icon: Image, label: "Media", key: "media" },
    { icon: FileText, label: "Pages", key: "pages" },
    { icon: Package, label: "Products", key: "products" },
    { icon: Utensils, label: "Restaurant", key: "restaurant" },
    { icon: Users, label: "Customers", key: "customers" },
    { icon: ShoppingCart, label: "Orders", key: "orders" },
    { icon: CreditCard, label: "Plans", key: "plans" },
    { icon: MapPin, label: "Station", key: "station" },
    { icon: Award, label: "Badges", key: "badges" },
    { icon: Star, label: "Featured", key: "featured" },
    { icon: FileText, label: "Earning Reports", key: "reports" },
    { icon: Palette, label: "Appearance", key: "appearance" },
    { icon: Globe, label: "Language", key: "language" },
    { icon: RefreshCw, label: "Update", key: "update" },
  ];

  return (
    <div className={`fixed left-0 top-0 h-full bg-white shadow-lg z-40 transition-all duration-300 ${collapsed ? 'w-16' : 'w-64'}`}>
      {/* Logo Section */}
      <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200">
        {!collapsed && (
          <h1 className="text-xl font-bold text-blue-600">RELSWAD</h1>
        )}
        <button
          onClick={() => setCollapsed(!collapsed)}
          className="p-2 rounded-lg hover:bg-gray-100 transition-colors"
        >
          {collapsed ? <ChevronRight size={20} /> : <ChevronLeft size={20} />}
        </button>
      </div>

      {/* Navigation Items */}
      <nav className="mt-4 px-2">
        {sidebarItems.map((item) => (
          <button
            key={item.key}
            onClick={() => setActiveItem(item.key)}
            className={`w-full flex items-center px-3 py-3 mb-1 text-sm font-medium rounded-lg transition-all duration-200 ${
              activeItem === item.key
                ? "bg-blue-50 text-blue-600 border-r-4 border-blue-600"
                : "text-gray-600 hover:bg-gray-50 hover:text-gray-900"
            }`}
          >
            <item.icon size={20} className="flex-shrink-0" />
            {!collapsed && (
              <span className="ml-3 transition-opacity duration-200">
                {item.label}
              </span>
            )}
          </button>
        ))}
      </nav>
    </div>
  );
};

// Common Navbar Component (Fixed)
const CommonNavbar = ({ collapsed, title, breadcrumbs = [] }) => {
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);

  return (
    <div className={`fixed top-0 right-0 bg-white shadow-sm border-b border-gray-200 z-30 transition-all duration-300 ${collapsed ? 'left-16' : 'left-64'}`}>
      <div className="flex items-center justify-between h-16 px-6">
        {/* Left Side - Title and Breadcrumbs */}
        <div className="flex items-center">
          <button
            onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            className="lg:hidden p-2 rounded-md hover:bg-gray-100 mr-2"
          >
            <Menu size={20} />
          </button>
          <div>
            <h1 className="text-xl font-semibold text-gray-900">{title}</h1>
            {breadcrumbs.length > 0 && (
              <div className="flex items-center text-sm text-gray-500 mt-1">
                {breadcrumbs.map((crumb, index) => (
                  <React.Fragment key={index}>
                    <span>{crumb}</span>
                    {index < breadcrumbs.length - 1 && (
                      <ChevronRight size={12} className="mx-2" />
                    )}
                  </React.Fragment>
                ))}
              </div>
            )}
          </div>
        </div>

        {/* Right Side - User Info and Actions */}
        <div className="flex items-center space-x-4">
          <button className="p-2 rounded-lg hover:bg-gray-100 transition-colors relative">
            <Bell size={20} className="text-gray-600" />
            <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
              3
            </span>
          </button>
          
          <button className="p-2 rounded-lg hover:bg-gray-100 transition-colors">
            <Settings size={20} className="text-gray-600" />
          </button>

          <div className="flex items-center space-x-3">
            <span className="text-sm text-gray-600">Hi, Relswad</span>
            <div className="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
              <span className="text-white text-sm font-medium">R</span>
            </div>
            <ChevronDown size={16} className="text-gray-500" />
          </div>
        </div>
      </div>
    </div>
  );
};

// Dashboard Page Component
const DashboardPage = () => {
  const statsCards = [
    {
      title: "Total Earnings",
      value: "0.00",
      icon: DollarSign,
      color: "bg-blue-500",
      textColor: "text-blue-600",
    },
    {
      title: "Total Payouts",
      value: "0.00",
      icon: TrendingUp,
      color: "bg-red-500",
      textColor: "text-red-600",
    },
    {
      title: "Total Restaurant",
      value: "93",
      icon: UtensilsCrossed,
      color: "bg-orange-500",
      textColor: "text-orange-600",
    },
    {
      title: "Total Customers",
      value: "12",
      icon: UserPlus,
      color: "bg-green-500",
      textColor: "text-green-600",
    },
  ];

  const orderStats = [
    { label: "In Pending", value: "3", color: "text-gray-600" },
    { label: "In Progress", value: "2", color: "text-blue-600" },
    { label: "Completed", value: "11", color: "text-green-600" },
  ];

  const orders = [
    {
      id: 1,
      title: "Relswad Train Food Delivery – New",
      type: "Home Delivery",
      amount: "182",
      author: "Sigri Restaurant",
      status: "active",
    },
    {
      id: 2,
      title: "Don't Miss Our Tasty Deals – Available on All Major Routes.",
      type: "Home Delivery",
      amount: "182",
      author: "Sigri Restaurant",
      status: "active",
    },
    {
      id: 3,
      title: "Special Combo Meal",
      type: "Home Delivery",
      amount: "182",
      author: "Sigri Restaurant",
      status: "active",
    },
  ];

  return (
    <div className="space-y-6">
      {/* Stats Cards */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {statsCards.map((card, index) => (
          <div key={index} className="bg-white rounded-lg shadow-sm p-6 border">
            <div className="flex items-center space-x-4">
              <div className={`p-3 rounded-lg ${card.color}`}>
                <card.icon size={24} className="text-white" />
              </div>
              <div>
                <p className="text-sm text-gray-600">{card.title}</p>
                <p className={`text-2xl font-bold ${card.textColor}`}>
                  {card.value}
                </p>
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Statistics Row */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Order Statistics */}
        <div className="bg-white rounded-lg shadow-sm p-6 border">
          <h3 className="text-lg font-semibold mb-4">Order Statistics</h3>
          <div className="space-y-4">
            {orderStats.map((stat, index) => (
              <div key={index} className="flex justify-between items-center">
                <span className="text-sm text-gray-600">{stat.label}</span>
                <span className={`text-lg font-semibold ${stat.color}`}>
                  {stat.value}
                </span>
              </div>
            ))}
          </div>
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-blue-500 rounded">
                <ShoppingCart size={20} className="text-white" />
              </div>
              <div>
                <p className="text-sm text-gray-600">Total Orders</p>
                <p className="text-xl font-bold text-blue-600">17</p>
              </div>
            </div>
          </div>
        </div>

        {/* Today's Order Statistics */}
        <div className="bg-white rounded-lg shadow-sm p-6 border">
          <h3 className="text-lg font-semibold mb-4">Today's Order Statistics</h3>
          <div className="space-y-4">
            {orderStats.map((stat, index) => (
              <div key={index} className="flex justify-between items-center">
                <span className="text-sm text-gray-600">{stat.label}</span>
                <span className={`text-lg font-semibold text-gray-600`}>0</span>
              </div>
            ))}
          </div>
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-blue-500 rounded">
                <ShoppingCart size={20} className="text-white" />
              </div>
              <div>
                <p className="text-sm text-gray-600">Total Orders</p>
                <p className="text-xl font-bold text-blue-600">0</p>
              </div>
            </div>
          </div>
        </div>

        {/* Payout Statistics */}
        <div className="bg-white rounded-lg shadow-sm p-6 border">
          <h3 className="text-lg font-semibold mb-4">Payout Statistics</h3>
          <div className="space-y-4">
            {orderStats.map((stat, index) => (
              <div key={index} className="flex justify-between items-center">
                <span className="text-sm text-gray-600">{stat.label}</span>
                <span className={`text-lg font-semibold text-gray-600`}>0</span>
              </div>
            ))}
          </div>
          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <div className="flex items-center space-x-3">
              <div className="p-2 bg-blue-500 rounded">
                <CreditCard size={20} className="text-white" />
              </div>
              <div>
                <p className="text-sm text-gray-600">Total Payouts</p>
                <p className="text-xl font-bold text-blue-600">0</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Orders Table */}
      <div className="bg-white rounded-lg shadow-sm border">
        <div className="p-6 border-b">
          <div className="flex justify-between items-center">
            <h3 className="text-lg font-semibold text-blue-600">Recent Orders</h3>
            <button className="px-4 py-2 bg-blue-600 text-white rounded-lg text-sm hover:bg-blue-700 transition-colors">
              View All
            </button>
          </div>
        </div>

        <div className="overflow-x-auto">
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Title
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Order Type
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Amount
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Author
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Action
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {orders.map((order) => (
                <tr key={order.id} className="hover:bg-gray-50">
                  <td className="px-6 py-4">
                    <div className="text-sm font-medium text-gray-900">
                      {order.title}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <span className="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                      {order.type}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-900">
                    ₹{order.amount}
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-center">
                      <div className="w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center mr-3">
                        <span className="text-orange-600 font-medium text-sm">S</span>
                      </div>
                      <div className="text-sm font-medium text-gray-900">
                        {order.author}
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <button className="p-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors">
                      <Eye size={16} />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    </div>
  );
};

// Media Page Component
const MediaPage = () => {
  const [selectedFiles, setSelectedFiles] = useState(new Set());
  const [searchTerm, setSearchTerm] = useState("");

  const mediaFiles = [
    {
      id: 1,
      file: "/api/placeholder/60/40",
      userId: "#58",
      url: "/relswad.in/uploads/25/05/200...",
      directory: "uploads/25/05/",
      uploadedAt: "2 weeks ago",
    },
    {
      id: 2,
      file: "/api/placeholder/60/40",
      userId: "#58",
      url: "/relswad.in/uploads/25/05/200...",
      directory: "uploads/25/05/",
      uploadedAt: "2 weeks ago",
    },
    {
      id: 3,
      file: "/api/placeholder/60/40",
      userId: "#58",
      url: "/relswad.in/uploads/25/05/200...",
      directory: "uploads/25/05/",
      uploadedAt: "2 weeks ago",
    },
    {
      id: 4,
      file: "/api/placeholder/60/40",
      userId: "#58",
      url: "/relswad.in/uploads/25/05/200...",
      directory: "uploads/25/05/",
      uploadedAt: "2 weeks ago",
    },
  ];

  const handleSelectAll = (checked) => {
    if (checked) {
      setSelectedFiles(new Set(mediaFiles.map((file) => file.id)));
    } else {
      setSelectedFiles(new Set());
    }
  };

  const handleSelectFile = (fileId, checked) => {
    const newSelected = new Set(selectedFiles);
    if (checked) {
      newSelected.add(fileId);
    } else {
      newSelected.delete(fileId);
    }
    setSelectedFiles(newSelected);
  };

  const isAllSelected = selectedFiles.size === mediaFiles.length;
  const isIndeterminate = selectedFiles.size > 0 && selectedFiles.size < mediaFiles.length;

  return (
    <div className="space-y-6">
      {/* Controls */}
      <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center space-y-4 sm:space-y-0">
        <div className="flex items-center space-x-3">
          <select className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white">
            <option>Select Action</option>
            <option>Delete Selected</option>
            <option>Move to Folder</option>
          </select>
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            Apply
          </button>
        </div>

        <div className="flex items-center space-x-3">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="text"
              placeholder="Search..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-64"
            />
          </div>
          <button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
            Search
          </button>
        </div>
      </div>

      {/* Table */}
      <div className="bg-white rounded-lg shadow-sm overflow-hidden">
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left">
                  <input
                    type="checkbox"
                    checked={isAllSelected}
                    ref={(input) => {
                      if (input) input.indeterminate = isIndeterminate;
                    }}
                    onChange={(e) => handleSelectAll(e.target.checked)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  File
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  User Id
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Url
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Directory
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Uploaded At
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {mediaFiles.map((file) => (
                <tr key={file.id} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4">
                    <input
                      type="checkbox"
                      checked={selectedFiles.has(file.id)}
                      onChange={(e) => handleSelectFile(file.id, e.target.checked)}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                  </td>
                  <td className="px-6 py-4">
                    <div className="w-16 h-12 bg-gray-200 rounded-lg overflow-hidden">
                      <div className="w-full h-full bg-gradient-to-br from-blue-100 to-blue-200 flex items-center justify-center">
                        <FileText className="w-6 h-6 text-blue-500" />
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <span className="text-blue-600 font-medium hover:text-blue-800 cursor-pointer">
                      {file.userId}
                    </span>
                  </td>
                  <td className="px-6 py-4">
                    <span className="text-blue-600 hover:text-blue-800 cursor-pointer text-sm">
                      {file.url}
                    </span>
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-600">
                    {file.directory}
                  </td>
                  <td className="px-6 py-4 text-sm text-gray-600">
                    {file.uploadedAt}
                  </td>
                  <td className="px-6 py-4">
                    <button className="text-gray-400 hover:text-gray-600 transition-colors">
                      <MoreHorizontal className="w-5 h-5" />
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* Pagination */}
      <div className="flex items-center justify-between">
        <div className="text-sm text-gray-600">
          Showing {mediaFiles.length} results
        </div>
        <div className="flex items-center space-x-2">
          <button className="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
            Previous
          </button>
          <button className="px-3 py-2 bg-blue-600 text-white rounded-lg">1</button>
          <button className="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
            2
          </button>
          <button className="px-3 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors">
            Next
          </button>
        </div>
      </div>
    </div>
  );
};

// Main App Component with Layout
const App = () => {
  const [collapsed, setCollapsed] = useState(false);
  const [activeItem, setActiveItem] = useState("dashboard");

  const renderPage = () => {
    switch (activeItem) {
      case "dashboard":
        return <DashboardPage />;
      case "media":
        return <MediaPage />;
      case "pages":
        return <div className="bg-white rounded-lg shadow-sm p-6 border"><h2 className="text-xl font-semibold">Pages Management</h2><p className="text-gray-600 mt-2">Pages content will go here.</p></div>;
      case "products":
        return <div className="bg-white rounded-lg shadow-sm p-6 border"><h2 className="text-xl font-semibold">Products Management</h2><p className="text-gray-600 mt-2">Products content will go here.</p></div>;
      case "restaurant":
        return <div className="bg-white rounded-lg shadow-sm p-6 border"><h2 className="text-xl font-semibold">Restaurant Management</h2><p className="text-gray-600 mt-2">Restaurant content will go here.</p></div>;
      case "customers":
        return <div className="bg-white rounded-lg shadow-sm p-6 border"><h2 className="text-xl font-semibold">Customers Management</h2><p className="text-gray-600 mt-2">Customers content will go here.</p></div>;
      case "orders":
        return <div className="bg-white rounded-lg shadow-sm p-6 border"><h2 className="text-xl font-semibold">Orders Management</h2><p className="text-gray-600 mt-2">Orders content will go here.</p></div>;
      default:
        return <DashboardPage />;
    }
  };

  const getPageTitle = () => {
    const titles = {
      dashboard: "Dashboard",
      media: "All Media Files",
      pages: "Pages Management",
      products: "Products Management",
      restaurant: "Restaurant Management",
      customers: "Customers Management",
      orders: "Orders Management",
    };
    return titles[activeItem] || "Dashboard";
  };

  const getBreadcrumbs = () => {
    const breadcrumbs = {
      dashboard: ["admin", "dashboard"],
      media: ["admin", "media"],
      pages: ["admin", "pages"],
      products: ["admin", "products"],
      restaurant: ["admin", "restaurant"],
      customers: ["admin", "customers"],
      orders: ["admin", "orders"],
    };
    return breadcrumbs[activeItem] || ["admin", "dashboard"];
  };

  return (
    <div className="h-screen bg-gray-50 overflow-hidden">
      {/* Fixed Sidebar */}
      <CommonSidebar 
        collapsed={collapsed} 
        setCollapsed={setCollapsed}
        activeItem={activeItem}
        setActiveItem={setActiveItem}
      />
      
      {/* Fixed Navbar */}
      <CommonNavbar 
        collapsed={collapsed} 
        title={getPageTitle()}
        breadcrumbs={getBreadcrumbs()}
      />
      
      {/* Scrollable Main Content */}
      <main className={`transition-all duration-300 pt-16 ${collapsed ? 'ml-16' : 'ml-64'}`}>
        <div className="p-6 h-full overflow-y-auto">
          {renderPage()}
        </div>
      </main>
    </div>
  );
};

export default App;